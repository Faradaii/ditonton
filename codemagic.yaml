workflows:
  default-workflow:
    name: Default Workflow for ditonton
    instance_type: mac_mini_m2
    max_build_duration: 60

    inputs:
      name:
        description: Input description
        default: Codemagic

    environment:
      groups:
        - firebase_credentials
      flutter: stable
      xcode: latest
      android_signing:
        - keystore_ditonton

    cache:
      cache_paths:
        - ~/.pub-cache

    triggering:
      events:
        - push

      branch_patterns:
        - pattern: '*'
          include: true
          source: true
      cancel_previous_builds: false

    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get dependencies and run build_runner
        script: |
          flutter pub get
          echo "Running build_runner..."
          flutter pub run build_runner build --delete-conflicting-outputs
      - name: Run tests with coverage
        script: |
          chmod +x ./test.sh
          ./test.sh
          brew update
          brew install lcov
          echo "lcov and genhtml installed"
          genhtml coverage/test.info --output-directory coverage/html
          echo "HTML coverage report generated in coverage/html"
          zip -r coverage-report.zip coverage/html
          echo "Zipped HTML report"

      - name: Load Firebase configuration
        script: |
          #!/usr/bin/env sh
          set -e # exit on first failed command

          PROJECT_ROOT=$CM_BUILD_DIR   # ADD YOUR PROJECT FOLDER PATH HERE

          echo "Decoding Firebase credentials..."
          echo $ANDROID_FIREBASE_SECRET | base64 --decode > $PROJECT_ROOT/android/app/google-services.json
          echo $IOS_FIREBASE_SECRET | base64 --decode > $PROJECT_ROOT/ios/Runner/GoogleService-Info.plist
          echo "Firebase configuration successfully loaded!"
      - name: Build AAB APK
        script: |
          flutter build appbundle --release
          flutter build apk --release

    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
      - coverage/*.info
      - coverage-report.zip

    publishing:
      email:
        recipients:
          - kdkfrdy@gmail.com
        notify:
          success: true
          failure: true

      scripts:
        - name: Check for apk
          script: |
            apkPath=$(find build -name "*.apk" | head -1)
            if [[ -z ${apkPath} ]]
            then
              echo "No .apk were found"
            else
              echo "Publishing .apk artifacts"
            fi

        - name: Check for aab
          script: |
            aabPath=$(find build -name "*.aab" | head -1)
            if [[ -z ${aabPath} ]]
            then
              echo "No .aab were found"
            else
              echo "Publishing .aab artifacts"
            fi

        - name: Check for test report
          script: |
            testReportPath=$(find build -name "*.zip" | head -1)
            if [[ -z ${testReportPath} ]]
            then
              echo "No report .zip were found"
            else
              echo "Publishing .zip artifacts"
            fi

        - name: Publish to GitHub
          script: |
            #!/usr/bin/env zsh

            COMMIT_HASH=$(git rev-parse --short HEAD)
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

            RELEASE_NAME="release-${COMMIT_HASH}"

            FILES=""
            [[ -f "${apkPath}" ]] && FILES="${FILES} ${apkPath}"
            [[ -f "${aabPath}" ]] && FILES="${FILES} ${aabPath}"
            [[ -f "${testReportPath}" ]] && FILES="${FILES} ${testReportPath}"

            gh release create "${RELEASE_NAME}" \
              --title "Ditonton release: ${BRANCH_NAME} (${COMMIT_HASH})" \
              ${FILES} || { echo "Failed to create release"; exit 1; }

            echo "Release successfully created: ${RELEASE_NAME}"