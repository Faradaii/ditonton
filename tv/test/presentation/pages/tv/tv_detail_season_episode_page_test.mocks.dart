// Mocks generated by Mockito 5.4.5 from annotations
// in tv/test/presentation/pages/tv/tv_detail_season_episode_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:core/common/state_enum.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:tv/domain/entities/tv/episode/episode.dart' as _i3;
import 'package:tv/domain/usecases/tv/get_tv_detail_season_episode.dart' as _i2;
import 'package:tv/presentation/provider/tv/tv_detail_season_episode_notifier.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvDetailSeasonEpisode_0 extends _i1.SmartFake
    implements _i2.GetTvDetailSeasonEpisode {
  _FakeGetTvDetailSeasonEpisode_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEpisode_1 extends _i1.SmartFake implements _i3.Episode {
  _FakeEpisode_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TvDetailSeasonEpisodeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailSeasonEpisodeNotifier extends _i1.Mock
    implements _i4.TvDetailSeasonEpisodeNotifier {
  MockTvDetailSeasonEpisodeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvDetailSeasonEpisode get getTvDetailSeasonEpisode =>
      (super.noSuchMethod(
            Invocation.getter(#getTvDetailSeasonEpisode),
            returnValue: _FakeGetTvDetailSeasonEpisode_0(
              this,
              Invocation.getter(#getTvDetailSeasonEpisode),
            ),
          )
          as _i2.GetTvDetailSeasonEpisode);

  @override
  _i3.Episode get episode =>
      (super.noSuchMethod(
            Invocation.getter(#episode),
            returnValue: _FakeEpisode_1(this, Invocation.getter(#episode)),
          )
          as _i3.Episode);

  @override
  _i5.RequestState get episodeState =>
      (super.noSuchMethod(
            Invocation.getter(#episodeState),
            returnValue: _i5.RequestState.empty,
          )
          as _i5.RequestState);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i7.Future<void> fetchTvDetailSeasonEpisode({
    required int? id,
    required int? seasonNumber,
    required int? episodeNumber,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTvDetailSeasonEpisode, [], {
              #id: id,
              #seasonNumber: seasonNumber,
              #episodeNumber: episodeNumber,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
